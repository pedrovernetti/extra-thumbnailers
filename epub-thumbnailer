#!/usr/bin/python3

# =============================================================================================
# This program is free software: you can redistribute it and/or modify it under the terms of
# the GNU General Public License as published by the Free Software Foundation, either version
# 3 of the License, or (at your option) any later version.
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
# without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# This script must/should come together with a copy of the GNU General Public License. If not,
# access <http://www.gnu.org/licenses/> to find and read it.
#
# Author: Mariano Simone (http://marianosimone.com)
# Version: 1.0
# Name: epub-thumbnailer
# Description: generates (cover) thumbnails for EPUBs
#
# #  In order to have this script working (if it is currently not), run 'install.sh'.
# =============================================================================================

from sys import argv
from os import path as osPath
from re import compile as Regex, IGNORECASE
from zipfile import ZipFile
from io import BytesIO
from xml.dom import minidom
from urllib.request import urlopen
from PIL import Image



imagesRegex = Regex(r'^.*\.(jpg|jpeg|png)$', flags=IGNORECASE)
coverRegex = Regex(r'.*cover.*\.(jpg|jpeg|png)', flags=IGNORECASE)



def getCoverFromManifest( epub ):
    # open the main container
    container = epub.open(r'META-INF/container.xml')
    containerRoot = minidom.parseString(container.read())
    # locate the rootfile
    elem = containerRoot.getElementsByTagName(r'rootfile')[0]
    rootfilePath = elem.getAttribute(r'full-path')
    # open the rootfile
    rootfile = epub.open(rootfilePath)
    rootfileRoot = minidom.parseString(rootfile.read())
    # find possible cover in meta
    coverID = None
    for meta in rootfileRoot.getElementsByTagName(r'meta'):
        if meta.getAttribute(r'name') == r'cover':
            coverID = meta.getAttribute(r'content')
            break
    # find the manifest element
    manifest = rootfileRoot.getElementsByTagName(r'manifest')[0]
    for item in manifest.getElementsByTagName(r'item'):
        itemID = item.getAttribute(r'id')
        itemProperties = item.getAttribute(r'properties')
        itemHREF = item.getAttribute(r'href')
        itemHREFIsImage = imagesRegex.match(itemHREF.lower())
        itemIDMightBeCover = itemID == coverID or (r'cover' in itemID and itemHREFIsImage)
        itemPropertiesMightBeCover = itemProperties == coverID or (r'cover' in itemProperties and itemHREFIsImage)
        if (itemIDMightBeCover or itemPropertiesMightBeCover):
            return osPath.join(osPath.dirname(rootfilePath), itemHREF)

    return None

def getCoverByFilename( epub ):
    images = []
    for fileinfo in epub.filelist:
        if (coverRegex.match(fileinfo.filename)): return fileinfo.filename
        if (imagesRegex.match(fileinfo.filename)): images.append(fileinfo)
    if (images): return max(images, key=lambda f: f.file_size)
    else: return None

def extractCover( path, outputFile ):
    if (path):
        cover = epub.open(path)
        im = Image.open(BytesIO(cover.read()))
        im.thumbnail((size, size), Image.ANTIALIAS)
        if im.mode == r'CMYK': im = im.convert(r'RGB')
        im.save(outputFile, r'PNG')
        return True
    return False



if (__name__ == '__main__'):
    inputfile = argv[1] # Which file are we working with?
    outputfile = argv[2] # Where does the file have to be saved to?
    size = int(argv[3]) # Required size?
    if (osPath.isfile(inputfile)): fileURI = open(inputfile, r'rb')
    else: fileURI = urlopen(inputfile)
    epub = ZipFile(BytesIO(fileURI.read()), r'r')
    for strategy in {getCoverFromManifest, getCoverByFilename}:
        try:
            coverPath = strategy(epub)
            if (extractCover(coverPath, outputfile)): exit(0)
        except Exception as ex:
            print("Error getting cover using %s: " % strategy.__name__, ex)
    exit(1)
